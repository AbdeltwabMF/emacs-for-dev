#+title: Emacs Rice
#+date: <2022-03-06 Sun>
#+property: header-args:emacs-lisp :tangle init.el
#+options: toc
#+author: Abd El-Twab M. Fakhry
#+language: en
#+creator: Emacs 27.2 (Org mode 9.4.4)

* Preface
GNU Emacs isn’t a text editor, it’s the ultimate productivity environment for hackers. This document contains the core parts of my Emacs configuration which drive the workflow I use every day.

* Startup Performance
Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.
The default is 800 kilobytes.  Measured in bytes.
#+BEGIN_SRC emacs-lisp
  ;;; package --- Summary

  ;;; Commentary:
  ;; My Emacs configuration in org mode

  ;;; Code:
  (setq gc-cons-threshold (* 50 1000 1000))

  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time))) gcs-done)))
#+END_SRC

* Keep it Clean
I don’t want a bunch of transient files showing up as untracked in the Git repo so I move them all to another location.
#+BEGIN_SRC emacs-lisp
  ;; Change the user-emacs-directory to keep unwanted things out of ~/.config/emacs
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
        url-history-file (expand-file-name "url/history" user-emacs-directory))

  ;; Use no-littering to automatically set common paths to the new user-emacs-directory
  (use-package no-littering)

  ;; Keep customization settings in a temporary file
  (setq custom-file
        (if (boundp 'server-socket-dir)
            (expand-file-name "custom.el" server-socket-dir)
          (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)
#+END_SRC

* Package Manager
Initialize package sources
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC

* General Configuration
** User Interface
Clean up Emacs’ user interface, make it more minimal.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq visible-bell t)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
  (menu-bar-mode -1)
#+END_SRC

Improve scrolling.
#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
  (setq use-dialog-box nil) ;; Disable dialog boxes since they weren't working in Mac OSX
#+END_SRC

Set frame transparency and maximize windows by default.
#+BEGIN_SRC emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(95 . 90))
  (add-to-list 'default-frame-alist '(alpha . (95 . 90)))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

Enable line numbers and customize their format.
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode t)
  (column-number-mode)
  (setq display-line-numbers-type 'relative)
  (use-package command-log-mode)

  (dolist (mode '(term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  vterm-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

Don’t warn for large files (shows up when launching videos)
#+BEGIN_SRC emacs-lisp
  (setq large-file-warning-threshold nil)
#+END_SRC

Don’t warn for following symlinked files
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC

Don’t warn when advice is added for functions
#+BEGIN_SRC emacs-lisp
  (setq ad-redefinition-action 'accept)
#+END_SRC

** Theme 
Rainbow Delimiters Mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'foo-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

A nice gallery of Emacs themes can be found at https://emacsthemes.com/.
#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
    :ensure t
    :config
    (load-theme 'gruvbox-light-soft t))
#+END_SRC

** Font
*** Set the font
Different platforms need different default font sizes, and Fantasque Sans Mono is currently my favorite face.
#+BEGIN_SRC emacs-lisp
  ;; Set the font face based on platform
  (pcase system-type
    ((or 'gnu/linux 'windows-nt 'cygwin)
     (set-face-attribute 'default nil
                         :font "Fantasque Sans Mono"
                         :weight 'light
                         :height 110))
    ('darwin (set-face-attribute 'default nil :font "Fira Mono" :height 110)))

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil
                      :font "Fantasque Sans Mono"
                      :weight 'light
                      :height 110)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil
                      ;; :font "Cantarell"
                      :font "Linux Biolinum"
                      :height 100
                      :weight 'light)
#+END_SRC

إعداد الخط للنصوص العربية
#+BEGIN_SRC emacs-lisp
  (set-fontset-font "fontset-default" 'arabic (font-spec
                                               :family "Amiri Quran"
                                               :height 110))
#+END_SRC

*** Enable proper Unicode glyph support
#+BEGIN_SRC emacs-lisp
  (defun amf/replace-unicode-font-mapping (block-name old-font new-font)
    (let* ((block-idx (cl-position-if
                       (lambda (i) (string-equal (car i) block-name))
                       unicode-fonts-block-font-mapping))
           (block-fonts (cadr (nth block-idx unicode-fonts-block-font-mapping)))
           (updated-block (cl-substitute new-font old-font block-fonts :test 'string-equal)))
      (setf (cdr (nth block-idx unicode-fonts-block-font-mapping))
            `(,updated-block))))

  (use-package unicode-fonts
    :disabled
    :if (not amf/is-termux)
    :custom
    (unicode-fonts-skip-font-groups '(low-quality-glyphs))
    :config
    ;; Fix the font mappings to use the right emoji font
    (mapcar
     (lambda (block-name)
       (amf/replace-unicode-font-mapping block-name "Noto Color Emoji"))
     '("Dingbats"
       "Emoticons"
       "Miscellaneous Symbols and Pictographs"
       "Transport and Map Symbols"))
    (unicode-fonts-setup))
#+END_SRC

*** Emojis in buffers
Emojify is an Emacs extension to display emojis. It can display github style emojis like :smile: or plain ascii ones like :).
#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :ensure t
    :hook
    (after-init . global-emojify-mode))
#+END_SRC

NOTE: The first time you load your configuration on a new machine, you'll
need to run the following command interactively so that mode line icons
display correctly:
/M-x all-the-icons-install-fonts/
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+END_SRC

** Mode Line
*** Basic Customization
#+BEGIN_SRC emacs-lisp
  (setq display-time-format "%l:%M %p %b %y"
        display-time-default-load-average nil)
#+END_SRC

*** Enable Mode Diminishing
The diminish package hides pesky minor modes from the modelines.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
#+END_SRC

*** Doom Modeline
#+BEGIN_SRC emacs-lisp
  ;; You must run (all-the-icons-install-fonts) one time after
  ;; installing this package!

  (use-package minions
    :hook (doom-modeline-mode . minions-mode))

  (use-package doom-modeline
    :ensure t
    :after eshell     ;; Make sure it gets hooked after eshell
    :hook (after-init . doom-modeline-init)
    :custom-face
    (mode-line ((t (:height 0.85))))
    (mode-line-inactive ((t (:height 0.85))))
    :custom
    (doom-modeline-height 16)
    (doom-modeline-bar-width 4)
    (doom-modeline-lsp t)
    (doom-modeline-github nil)

    ;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
    (doom-modeline-mu4e nil)
    ;; also enable the start of mu4e-alert
    (mu4e-alert-enable-mode-line-display)

    (doom-modeline-persp-name nil)
    (doom-modeline-buffer-file-name-style 'truncate-upto-project)

    ;; Whether to use hud instead of default bar. It's only respected in GUI.
    (doom-modeline-hud nil)

    ;; Whether display icons in the mode-line.
    ;; While using the server mode in GUI, should set the value explicitly.
    (doom-modeline-icon (display-graphic-p))

    ;; Whether display the indentation information.
    (doom-modeline-indent-info t)

    ;; The limit of the window width.
    ;; If `window-width' is smaller than the limit, some information won't be displayed.
    (doom-modeline-window-width-limit fill-column)

    ;; Whether display the environment version.
    (doom-modeline-env-version t)
    (doom-modeline-major-mode-icon t)
    ;; Whether display the colorful icon for `major-mode'.
    ;; It respects `all-the-icons-color-icons'.
    (doom-modeline-major-mode-color-icon t)

    (doom-modeline-minor-modes t))

  (doom-modeline-mode 1)
#+END_SRC

** Notifications
alert is a great library for showing notifications from other packages in a variety of ways. For now I just use it to surface desktop notifications from package code.

#+BEGIN_SRC emacs-lisp
  (use-package alert
    :commands alert
    :config
    (setq alert-default-style 'notifications))
#+END_SRC

** Auto-Saving Changed Files
#+BEGIN_SRC emacs-lisp
  (use-package super-save
    :defer 1
    :diminish super-save-mode
    :config
    (super-save-mode +1)
    (setq super-save-auto-save-when-idle t))
#+END_SRC

** Auto-Reverting Changed Files
#+BEGIN_SRC emacs-lisp
  ;; Revert Dired and other buffers
  (setq global-auto-revert-non-file-buffers t)

  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1)
#+END_SRC

** Workspaces
#+BEGIN_SRC emacs-lisp
  (use-package perspective
    :demand t
    :bind (("C-M-k" . persp-switch)
           ("C-M-n" . persp-next)
           ("C-x k" . persp-kill-buffer*))
    :custom
    (persp-initial-frame-name "Main")
    :config
    ;; Running `persp-mode' multiple times resets the perspective list...
    (unless (equal persp-mode t)
      (persp-mode)))
#+END_SRC

** Highlight Matching Braces
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode 1))
#+END_SRC

** Displaying World Time
display-time-world command provides a nice display of the time at a specified list of timezones. Nice for working in a team with remote members.
#+BEGIN_SRC emacs-lisp
  (setq display-time-world-list
        '(("Etc/UTC" "UTC")
          ("America/Los_Angeles" "Seattle")
          ("Africa/Cairo" "Cairo")
          ("Europe/Athens" "Athens")
          ("Pacific/Auckland" "Auckland")
          ("Asia/Shanghai" "Shanghai")
          ("Asia/Kolkata" "Hyderabad")))
  (setq display-time-world-time-format "%a, %d %b %I:%M %p %Z")
#+END_SRC

** Pinentry
Emacs can be prompted for the PIN of GPG private keys, we just need to set epa-pinentry-mode to accomplish that:
#+BEGIN_SRC emacs-lisp
  (use-package pinentry
    :ensure t)

  (setq epa-pinentry-mode 'loopback)
  (pinentry-start)
#+END_SRC

** TRAMP
Set default connection mode to SSH
#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
#+END_SRC
* Editing Configuration
** Tab Widths
Default to an indentation size of 2 spaces since it’s the norm for pretty much every language I use.
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
  (setq-default evil-shift-width tab-width)
#+END_SRC

** Use spaces instead of tabs for indentation
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

** Automatically clean whitespace
#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :hook ((text-mode . ws-butler-mode)
           (prog-mode . ws-butler-mode)))
#+END_SRC

* Completion System
** Completions in Regions with Corfu
#+BEGIN_SRC emacs-lisp
  (use-package corfu
    :bind (:map corfu-map
                ("C-j" . corfu-next)
                ("C-k" . corfu-previous)
                ("C-f" . corfu-insert))
    :custom
    (corfu-cycle t)
    :config
    (corfu-global-mode))
#+END_SRC

** Improved Candidate Filtering with Orderless
#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))
#+END_SRC

* Jumping with Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :commands (avy-goto-char avy-goto-word-0 avy-goto-line))
  (global-set-key (kbd "C-:") 'avy-goto-char) ;; القفز إلى حرف ما
  (global-set-key (kbd "C-'") 'avy-goto-char-2) ;; القفز إلى حرف باستخدام حرفين
  (global-set-key (kbd "M-g f") 'avy-goto-line) ;; القفز إلى سطر
  (global-set-key (kbd "M-g w") 'avy-goto-word-1) ;; القفز إلى كلمة باستخدام حرفها الأول
  (global-set-key (kbd "M-g e") 'avy-goto-word-0) ;; القفز إلى أي كلمة من كلمات البفر
#+END_SRC

* Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :ensure t
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  ;;If you want to replace the default Emacs help keybindings, you can do so:
  ;; Note that the built-in `describe-function' includes both functions
  ;; and macros. `helpful-function' is functions only, so we provide
  ;; `helpful-callable' as a drop-in replacement.
  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)
#+END_SRC

* Buffer Management with Bufler
Bufler is an excellent package by alphapapa which enables you to automatically group all of your Emacs buffers into workspaces by defining a series of grouping rules. Once you have your groups defined (or use the default configuration which is quite good already), you can use the bufler-workspace-frame-set command to focus your current Emacs frame on a particular workspace so that bufler-switch-buffer will only show buffers from that workspace. In my case, this allows me to dedicate an EXWM workspace to a specific Bufler workspace so that only see the buffers I care about in that EXWM workspace.
#+BEGIN_SRC emacs-lisp
  (use-package bufler
    :disabled
    :straight t
    :bind (("C-M-j" . bufler-switch-buffer)
           ("C-M-k" . bufler-workspace-frame-set))
    :config
    (evil-collection-define-key 'normal 'bufler-list-mode-map
      (kbd "RET")   'bufler-list-buffer-switch
      (kbd "M-RET") 'bufler-list-buffer-peek
      "D"           'bufler-list-buffer-kill)

    (setf bufler-groups
          (bufler-defgroups
           ;; Subgroup collecting all named workspaces.
           (group (auto-workspace))
           ;; Subgroup collecting buffers in a projectile project.
           (group (auto-projectile))
           ;; Grouping browser windows
           (group
            (group-or "Browsers"
                      (name-match "Vimb" (rx bos "vimb"))
                      (name-match "Qutebrowser" (rx bos "Qutebrowser"))
                      (name-match "Chromium" (rx bos "Chromium"))))
           (group
            (group-or "Chat"
                      (mode-match "Telega" (rx bos "telega-"))))
           (group
            ;; Subgroup collecting all `help-mode' and `info-mode' buffers.
            (group-or "Help/Info"
                      (mode-match "*Help*" (rx bos (or "help-" "helpful-")))
                      ;; (mode-match "*Helpful*" (rx bos "helpful-"))
                      (mode-match "*Info*" (rx bos "info-"))))
           (group
            ;; Subgroup collecting all special buffers (i.e. ones that are not
            ;; file-backed), except `magit-status-mode' buffers (which are allowed to fall
            ;; through to other groups, so they end up grouped with their project buffers).
            (group-and "*Special*"
                       (name-match "**Special**"
                                   (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace" "Pinentry") "*"))
                       (lambda (buffer)
                         (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                              buffer)
                                     (funcall (mode-match "Dired" (rx bos "dired"))
                                              buffer)
                                     (funcall (auto-file) buffer))
                           "*Special*"))))
           ;; Group remaining buffers by major mode.
           (auto-mode))))
#+END_SRC

* Window Management
** Frame Scaling / Zooming
The keybindings for this are C+M+- and C+M+=.
#+BEGIN_SRC emacs-lisp
  (use-package default-text-scale
    :defer 1
    :config
    (default-text-scale-mode))
#+END_SRC

** Window Selection with ace-window
ace-window helps with easily switching between windows based on a predefined set of keys used to identify each.
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind (("M-o" . ace-window))
    :custom
    (aw-scope 'frame)
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (aw-minibuffer-flag t)
    :config
    (ace-window-display-mode 1))
#+END_SRC

** Window History with winner-mode
#+BEGIN_SRC emacs-lisp
  (use-package winner
    :after evil
    :config
    (winner-mode)
    (define-key evil-window-map "u" 'winner-undo)
    (define-key evil-window-map "U" 'winner-redo))
#+END_SRC

** Control Buffer Placement
Emacs’ default buffer placement algorithm is pretty disruptive if you like setting up window layouts a certain way in your workflow. The display-buffer-alist variable controls this behavior and you can customize it to prevent Emacs from popping up new windows when you run commands.

#+BEGIN_SRC emacs-lisp
  ;; (setq display-buffer-base-action
  ;;       '(display-buffer-reuse-mode-window
  ;;         display-buffer-reuse-window
  ;;         display-buffer-same-window))

  ;; If a popup does happen, don't resize windows to be equal-sized
  (setq even-window-sizes nil)
#+END_SRC

* Credential Management
I use pass to manage all of my passwords locally. I also use auth-source-pass as the primary auth-source provider so that all passwords are stored in a single place.

#+BEGIN_SRC emacs-lisp
  (use-package password-store
    :config
    (setq password-store-password-length 12))

  (use-package auth-source-pass
    :config
    (auth-source-pass-enable))

  (use-package password-store-otp)

  (use-package oauth2)
#+END_SRC

* Evil Mode and Key Binding
#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (rune/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (rune/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))
#+END_SRC

* Project Management
NOTE: Make sure to configure a GitHub token before using this package!
[[https://magit.vc/manual/forge/Token-Creation.html#Token-Creation][Token Creation]]
[[https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started][Getting Started]]
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package forge
    :ensure t)
#+END_SRC

* Org Mode
#+BEGIN_SRC emacs-lisp
  (defun amf/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1))

  (defun amf/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))))

  (with-eval-after-load 'org-faces
    ;; Increase the size of various headings
    (set-face-attribute 'org-document-title nil :font "Cantarell" :weight 'bold :height 2.0)
    (dolist (face '((org-level-1 . 2.0)
                    (org-level-2 . 1.8)
                    (org-level-3 . 1.6)
                    (org-level-4 . 1.4)
                    (org-level-5 . 1.2)
                    (org-level-6 . 1.0)
                    (org-level-7 . 1.0)
                    (org-level-8 . 1.0)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face))))

  (use-package org
    :hook (org-mode . amf/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (amf/org-font-setup))

  (use-package org-bullets
    :after org
    :ensure t
    :config
    (add-hook 'org-mode-hook #'org-bullets-mode)
    (setq inhibit-compacting-font-caches t))

  (defun amf/org-mode-visual-fill ()
    (setq visual-fill-column-width 0
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . amf/org-mode-visual-fill))
#+END_SRC

This mode causes significant slowdown!
I have looked into the matter in the past, and from what I understand the usual cause
of this is relates to a deeper rooted issue involving fonts and font-lock reliant packages
#+BEGIN_SRC emacs-lisp
  (setq inhibit-compacting-font-caches t)

  (provide 'init)
  ;;; init.el ends here
#+END_SRC

