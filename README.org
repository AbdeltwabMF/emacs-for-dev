#+title: Emacs Rice
#+date: <2022-03-06 Sun>
#+property: header-args:emacs-lisp :tangle init.el
#+options: toc:7
#+author: Abd El-Twab M. Fakhry
#+language: en
#+creator: Emacs 27.2 (Org mode 9.4.4)

* Preface
GNU Emacs isn’t a text editor, it’s the ultimate productivity environment for hackers. This document contains the core parts of my Emacs configuration which drive the workflow I use every day.

** Generate init.el form this org mode file
  - M-x toc-org-insert-toc
  - Move the cursor up to the very top of the file and then:
    -  C-c C-c for local setup refresh
    -  C-c C-v t for tangle init.el

* TABLE OF CONTENTS                                                     :TOC_7:
- [[#preface][Preface]]
  - [[#generate-initel-form-this-org-mode-file][Generate init.el form this org mode file]]
- [[#startup-performance][Startup Performance]]
- [[#keep-it-clean][Keep it Clean]]
- [[#package-manager][Package Manager]]
- [[#general-configuration][General Configuration]]
  - [[#user-interface][User Interface]]
  - [[#theme][Theme]]
  - [[#font][Font]]
    - [[#set-the-font][Set the font]]
    - [[#emojis-in-buffers][Emojis in buffers]]
  - [[#mode-line][Mode Line]]
    - [[#basic-customization][Basic Customization]]
    - [[#enable-mode-diminishing][Enable Mode Diminishing]]
    - [[#doom-modeline][Doom Modeline]]
  - [[#notifications][Notifications]]
  - [[#auto-saving-changed-files][Auto-Saving Changed Files]]
  - [[#auto-reverting-changed-files][Auto-Reverting Changed Files]]
  - [[#workspaces][Workspaces]]
  - [[#highlight-matching-braces][Highlight Matching Braces]]
  - [[#displaying-world-time][Displaying World Time]]
  - [[#pinentry][Pinentry]]
  - [[#tramp][TRAMP]]
- [[#editing-configuration][Editing Configuration]]
  - [[#tab-widths][Tab Widths]]
  - [[#use-spaces-instead-of-tabs-for-indentation][Use spaces instead of tabs for indentation]]
  - [[#automatically-clean-whitespace][Automatically clean whitespace]]
- [[#completion-system][Completion System]]
  - [[#completions-in-regions-with-corfu][Completions in Regions with Corfu]]
  - [[#improved-candidate-filtering-with-orderless][Improved Candidate Filtering with Orderless]]
- [[#jumping-with-avy][Jumping with Avy]]
- [[#ivy][Ivy]]
- [[#buffer-management-with-bufler][Buffer Management with Bufler]]
- [[#window-management][Window Management]]
  - [[#frame-scaling--zooming][Frame Scaling / Zooming]]
  - [[#window-selection-with-ace-window][Window Selection with ace-window]]
  - [[#window-history-with-winner-mode][Window History with winner-mode]]
  - [[#control-buffer-placement][Control Buffer Placement]]
- [[#credential-management][Credential Management]]
- [[#evil-mode-and-key-binding][Evil Mode and Key Binding]]
  - [[#esc-cancels-all][ESC Cancels All]]
  - [[#rebind-c-u][Rebind C-u]]
  - [[#lets-be-evil][Let’s Be Evil]]
- [[#project-management][Project Management]]
  - [[#projectile][Projectile]]
  - [[#counsel-projectile][Counsel Projectile]]
  - [[#magit][Magit]]
    - [[#magit-todos][magit-todos]]
- [[#development][Development]]
  - [[#git][Git]]
    - [[#git-link][git-link]]
  - [[#languages][Languages]]
    - [[#language-server-support][Language Server Support]]
    - [[#debug-adapter-support][Debug Adapter Support]]
    - [[#meta-lisp][Meta Lisp]]
    - [[#scheme][Scheme]]
    - [[#cc][C/C++]]
    - [[#go][Go]]
    - [[#rust][Rust]]
    - [[#emacs-lisp][Emacs Lisp]]
    - [[#markdown][Markdown]]
    - [[#html][HTML]]
    - [[#yaml][YAML]]
  - [[#compilation][Compilation]]
  - [[#productivity][Productivity]]
    - [[#syntax-checking-with-flycheck][Syntax checking with Flycheck]]
    - [[#snippets][Snippets]]
    - [[#smart-parens][Smart Parens]]
    - [[#rainbow-mode][Rainbow Mode]]
- [[#writing][Writing]]
  - [[#darkroom-for-distraction-free-writing][Darkroom for distraction-free writing]]
  - [[#spell-checking][Spell-checking]]
- [[#applications][Applications]]
  - [[#calendar][Calendar]]
  - [[#vterm][vterm]]
  - [[#media][Media]]
    - [[#mpv][mpv]]
    - [[#emms][EMMS]]
  - [[#mail][Mail]]
- [[#org-mode][Org Mode]]

* Startup Performance
Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.
The default is 800 kilobytes.  Measured in bytes.
#+BEGIN_SRC emacs-lisp
  ;;; package --- Summary

  ;;; Commentary:
  ;; My Emacs configuration in org mode

  ;;; Code:
  (setq gc-cons-threshold (* 50 1000 1000))

  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time))) gcs-done)))
#+END_SRC

* Keep it Clean
I don’t want a bunch of transient files showing up as untracked in the Git repo so I move them all to another location.
#+BEGIN_SRC emacs-lisp
  ;; Change the user-emacs-directory to keep unwanted things out of ~/.config/emacs
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
        url-history-file (expand-file-name "url/history" user-emacs-directory))

  ;; Use no-littering to automatically set common paths to the new user-emacs-directory
  (use-package no-littering)

  ;; Keep customization settings in a temporary file
  (setq custom-file
        (if (boundp 'server-socket-dir)
            (expand-file-name "custom.el" server-socket-dir)
          (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)
#+END_SRC

* Package Manager
Initialize package sources
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC

Set up quelpa for packages not in Elpa/Melpa:
#+BEGIN_SRC emacs-lisp
  (use-package quelpa
    :ensure t)

  (use-package quelpa-use-package
    :ensure t)
#+END_SRC

* General Configuration
** User Interface
Clean up Emacs’ user interface, make it more minimal.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq visible-bell t)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
  (menu-bar-mode -1)
#+END_SRC

Improve scrolling.
#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
  (setq use-dialog-box nil) ;; Disable dialog boxes since they weren't working in Mac OSX
#+END_SRC

Set frame transparency and maximize windows by default.
#+BEGIN_SRC emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(95 . 90))
  (add-to-list 'default-frame-alist '(alpha . (95 . 90)))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

Enable line numbers and customize their format.
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode t)
  (column-number-mode)
  (setq display-line-numbers-type 'relative)
  (use-package command-log-mode)

  (dolist (mode '(term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  vterm-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

Don’t warn for large files (shows up when launching videos)
#+BEGIN_SRC emacs-lisp
  (setq large-file-warning-threshold nil)
#+END_SRC

Don’t warn for following symlinked files
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC

Don’t warn when advice is added for functions
#+BEGIN_SRC emacs-lisp
  (setq ad-redefinition-action 'accept)
#+END_SRC

** Theme 
Rainbow Delimiters Mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'foo-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

A nice gallery of Emacs themes can be found at https://emacsthemes.com/.
#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
    :ensure t
    :config
    (load-theme 'gruvbox-light-soft t))
#+END_SRC

** Font
*** Set the font
Different platforms need different default font sizes, and Fantasque Sans Mono is currently my favorite face.
#+BEGIN_SRC emacs-lisp
  ;; Set the font face based on platform
  (pcase system-type
    ((or 'gnu/linux 'windows-nt 'cygwin)
     (set-face-attribute 'default nil
                         :font "Fantasque Sans Mono"
                         :weight 'light
                         :height 110))
    ('darwin (set-face-attribute 'default nil :font "Fira Mono" :height 110)))

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil
                      :font "Fantasque Sans Mono"
                      :weight 'light
                      :height 110)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil
                      ;; :font "Cantarell"
                      :font "Linux Biolinum"
                      :height 100
                      :weight 'light)
#+END_SRC

إعداد الخط للنصوص العربية
#+BEGIN_SRC emacs-lisp
  (set-fontset-font "fontset-default" 'arabic (font-spec
                                               :family "Amiri Quran"
                                               :height 110))
#+END_SRC

*** Emojis in buffers
Emojify is an Emacs extension to display emojis. It can display github style emojis like :smile: or plain ascii ones like :).
#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :ensure t
    :hook
    (after-init . global-emojify-mode))
#+END_SRC

NOTE: The first time you load your configuration on a new machine, you'll
need to run the following command interactively so that mode line icons
display correctly:
/M-x all-the-icons-install-fonts/
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+END_SRC

** Mode Line
*** Basic Customization
#+BEGIN_SRC emacs-lisp
  (setq display-time-format "%l:%M %p %b %y"
        display-time-default-load-average nil)
#+END_SRC

*** Enable Mode Diminishing
The diminish package hides pesky minor modes from the modelines.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
#+END_SRC

*** Doom Modeline
#+BEGIN_SRC emacs-lisp
  ;; You must run (all-the-icons-install-fonts) one time after
  ;; installing this package!

  (use-package minions
    :hook (doom-modeline-mode . minions-mode))

  (use-package doom-modeline
    :ensure t
    :after eshell     ;; Make sure it gets hooked after eshell
    :hook (after-init . doom-modeline-init)
    :custom-face
    (mode-line ((t (:height 0.85))))
    (mode-line-inactive ((t (:height 0.85))))
    :custom
    (doom-modeline-height 16)
    (doom-modeline-bar-width 4)
    (doom-modeline-lsp t)
    (doom-modeline-github nil)

    ;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
    (doom-modeline-mu4e nil)
    ;; also enable the start of mu4e-alert
    (mu4e-alert-enable-mode-line-display)

    (doom-modeline-persp-name nil)
    (doom-modeline-buffer-file-name-style 'truncate-upto-project)

    ;; Whether to use hud instead of default bar. It's only respected in GUI.
    (doom-modeline-hud nil)

    ;; Whether display icons in the mode-line.
    ;; While using the server mode in GUI, should set the value explicitly.
    (doom-modeline-icon (display-graphic-p))

    ;; Whether display the indentation information.
    (doom-modeline-indent-info t)

    ;; The limit of the window width.
    ;; If `window-width' is smaller than the limit, some information won't be displayed.
    (doom-modeline-window-width-limit fill-column)

    ;; Whether display the environment version.
    (doom-modeline-env-version t)
    (doom-modeline-major-mode-icon t)
    ;; Whether display the colorful icon for `major-mode'.
    ;; It respects `all-the-icons-color-icons'.
    (doom-modeline-major-mode-color-icon t)

    (doom-modeline-minor-modes t))

  (doom-modeline-mode 1)
#+END_SRC

** Notifications
alert is a great library for showing notifications from other packages in a variety of ways. For now I just use it to surface desktop notifications from package code.

#+BEGIN_SRC emacs-lisp
  (use-package alert
    :commands alert
    :config
    (setq alert-default-style 'notifications))
#+END_SRC

** Auto-Saving Changed Files
#+BEGIN_SRC emacs-lisp
  (use-package super-save
    :defer 1
    :diminish super-save-mode
    :config
    (super-save-mode +1)
    (setq super-save-auto-save-when-idle t))
#+END_SRC

** Auto-Reverting Changed Files
#+BEGIN_SRC emacs-lisp
  ;; Revert Dired and other buffers
  (setq global-auto-revert-non-file-buffers t)

  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1)
#+END_SRC

** Workspaces
#+BEGIN_SRC emacs-lisp
  (use-package perspective
    :demand t
    :bind (("C-M-k" . persp-switch)
           ("C-M-n" . persp-next)
           ("C-x k" . persp-kill-buffer*))
    :custom
    (persp-initial-frame-name "Main")
    :config
    ;; Running `persp-mode' multiple times resets the perspective list...
    (unless (equal persp-mode t)
      (persp-mode)))
#+END_SRC

** Highlight Matching Braces
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode 1))
#+END_SRC

** Displaying World Time
display-time-world command provides a nice display of the time at a specified list of timezones. Nice for working in a team with remote members.
#+BEGIN_SRC emacs-lisp
  (setq display-time-world-list
        '(("Etc/UTC" "UTC")
          ("America/Los_Angeles" "Seattle")
          ("Africa/Cairo" "Cairo")
          ("Europe/Athens" "Athens")
          ("Pacific/Auckland" "Auckland")
          ("Asia/Shanghai" "Shanghai")
          ("Asia/Kolkata" "Hyderabad")))
  (setq display-time-world-time-format "%a, %d %b %I:%M %p %Z")
#+END_SRC

** Pinentry
Emacs can be prompted for the PIN of GPG private keys, we just need to set epa-pinentry-mode to accomplish that:
#+BEGIN_SRC emacs-lisp
  (use-package pinentry
    :ensure t)

  (setq epa-pinentry-mode 'loopback)
  (pinentry-start)
#+END_SRC

** TRAMP
Set default connection mode to SSH
#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
#+END_SRC
* Editing Configuration
** Tab Widths
Default to an indentation size of 2 spaces since it’s the norm for pretty much every language I use.
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
  (setq-default evil-shift-width tab-width)
#+END_SRC

** Use spaces instead of tabs for indentation
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

** Automatically clean whitespace
#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :hook ((text-mode . ws-butler-mode)
           (prog-mode . ws-butler-mode)))
#+END_SRC

* Completion System
** Completions in Regions with Corfu
#+BEGIN_SRC emacs-lisp
  (use-package corfu
    :bind (:map corfu-map
                ("C-j" . corfu-next)
                ("C-k" . corfu-previous)
                ("C-f" . corfu-insert))
    :custom
    (corfu-cycle t)
    :config
    (corfu-global-mode))
#+END_SRC

** Improved Candidate Filtering with Orderless
#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))
#+END_SRC

* Jumping with Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :commands (avy-goto-char avy-goto-word-0 avy-goto-line))
  (global-set-key (kbd "C-:") 'avy-goto-char) ;; القفز إلى حرف ما
  (global-set-key (kbd "C-'") 'avy-goto-char-2) ;; القفز إلى حرف باستخدام حرفين
  (global-set-key (kbd "M-g f") 'avy-goto-line) ;; القفز إلى سطر
  (global-set-key (kbd "M-g w") 'avy-goto-word-1) ;; القفز إلى كلمة باستخدام حرفها الأول
  (global-set-key (kbd "M-g e") 'avy-goto-word-0) ;; القفز إلى أي كلمة من كلمات البفر
#+END_SRC

* Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :ensure t
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  ;;If you want to replace the default Emacs help keybindings, you can do so:
  ;; Note that the built-in `describe-function' includes both functions
  ;; and macros. `helpful-function' is functions only, so we provide
  ;; `helpful-callable' as a drop-in replacement.
  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)
#+END_SRC

* Buffer Management with Bufler
Bufler is an excellent package by alphapapa which enables you to automatically group all of your Emacs buffers into workspaces by defining a series of grouping rules. Once you have your groups defined (or use the default configuration which is quite good already), you can use the bufler-workspace-frame-set command to focus your current Emacs frame on a particular workspace so that bufler-switch-buffer will only show buffers from that workspace. In my case, this allows me to dedicate an EXWM workspace to a specific Bufler workspace so that only see the buffers I care about in that EXWM workspace.
#+BEGIN_SRC emacs-lisp
  (use-package bufler
    :disabled
    :straight t
    :bind (("C-M-j" . bufler-switch-buffer)
           ("C-M-k" . bufler-workspace-frame-set))
    :config
    (evil-collection-define-key 'normal 'bufler-list-mode-map
      (kbd "RET")   'bufler-list-buffer-switch
      (kbd "M-RET") 'bufler-list-buffer-peek
      "D"           'bufler-list-buffer-kill)

    (setf bufler-groups
          (bufler-defgroups
           ;; Subgroup collecting all named workspaces.
           (group (auto-workspace))
           ;; Subgroup collecting buffers in a projectile project.
           (group (auto-projectile))
           ;; Grouping browser windows
           (group
            (group-or "Browsers"
                      (name-match "Vimb" (rx bos "vimb"))
                      (name-match "Qutebrowser" (rx bos "Qutebrowser"))
                      (name-match "Chromium" (rx bos "Chromium"))))
           (group
            (group-or "Chat"
                      (mode-match "Telega" (rx bos "telega-"))))
           (group
            ;; Subgroup collecting all `help-mode' and `info-mode' buffers.
            (group-or "Help/Info"
                      (mode-match "*Help*" (rx bos (or "help-" "helpful-")))
                      ;; (mode-match "*Helpful*" (rx bos "helpful-"))
                      (mode-match "*Info*" (rx bos "info-"))))
           (group
            ;; Subgroup collecting all special buffers (i.e. ones that are not
            ;; file-backed), except `magit-status-mode' buffers (which are allowed to fall
            ;; through to other groups, so they end up grouped with their project buffers).
            (group-and "*Special*"
                       (name-match "**Special**"
                                   (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace" "Pinentry") "*"))
                       (lambda (buffer)
                         (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                              buffer)
                                     (funcall (mode-match "Dired" (rx bos "dired"))
                                              buffer)
                                     (funcall (auto-file) buffer))
                           "*Special*"))))
           ;; Group remaining buffers by major mode.
           (auto-mode))))
#+END_SRC

* Window Management
** Frame Scaling / Zooming
The keybindings for this are C+M+- and C+M+=.
#+BEGIN_SRC emacs-lisp
  (use-package default-text-scale
    :defer 1
    :config
    (default-text-scale-mode))
#+END_SRC

** Window Selection with ace-window
ace-window helps with easily switching between windows based on a predefined set of keys used to identify each.
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind (("M-o" . ace-window))
    :custom
    (aw-scope 'frame)
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (aw-minibuffer-flag t)
    :config
    (ace-window-display-mode 1))
#+END_SRC

** Window History with winner-mode
#+BEGIN_SRC emacs-lisp
  (use-package winner
    :after evil
    :config
    (winner-mode)
    (define-key evil-window-map "u" 'winner-undo)
    (define-key evil-window-map "U" 'winner-redo))
#+END_SRC

** Control Buffer Placement
Emacs’ default buffer placement algorithm is pretty disruptive if you like setting up window layouts a certain way in your workflow. The display-buffer-alist variable controls this behavior and you can customize it to prevent Emacs from popping up new windows when you run commands.

#+BEGIN_SRC emacs-lisp
  ;; (setq display-buffer-base-action
  ;;       '(display-buffer-reuse-mode-window
  ;;         display-buffer-reuse-window
  ;;         display-buffer-same-window))

  ;; If a popup does happen, don't resize windows to be equal-sized
  (setq even-window-sizes nil)
#+END_SRC

* Credential Management
I use pass to manage all of my passwords locally. I also use auth-source-pass as the primary auth-source provider so that all passwords are stored in a single place.

#+BEGIN_SRC emacs-lisp
  (use-package password-store
    :config
    (setq password-store-password-length 12))

  (use-package auth-source-pass
    :config
    (auth-source-pass-enable))

  (use-package password-store-otp)

  (use-package oauth2)
#+END_SRC

The variable auth-sources controls how and where Auth-Source keeps its secrets. The default value is a list of three files: ("~/.authinfo" "~/.authinfo.gpg" "~/.netrc"), but to avoid confusion you should make sure that only one of these files exists and then you should also adjust the value of the variable to only ever use that file,
#+BEGIN_SRC emacs-lisp
  (setq auth-sources '("~/.authinfo.gpg"))
#+END_SRC

* Evil Mode and Key Binding
** ESC Cancels All
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC

** Rebind C-u
Since I let evil-mode take over C-u for buffer scrolling, I need to re-bind the universal-argument command to another key sequence. I’m choosing C-M-u for this purpose.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-M-u") 'universal-argument)
#+END_SRC

** Let’s Be Evil
Some tips can be found here:
- https://github.com/noctuid/evil-guide
- https://nathantypanski.com/blog/2014-08-03-a-vim-like-emacs-config.html

#+BEGIN_SRC emacs-lisp
  (defun amf/evil-hook ()
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    erc-mode
                    circe-server-mode
                    circe-chat-mode
                    circe-query-mode
                    sauron-mode
                    term-mode))
      (add-to-list 'evil-emacs-state-modes mode)))

  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode)
    :config
    ;; (setq undo-tree-auto-save-history 1) ;; you can turn this on
    ;; Each node in the undo tree should have a timestamp.
    (setq undo-tree-visualizer-timestamps t)
    ;; Show a diff window displaying changes between undo nodes.
    (setq undo-tree-visualizer-diff t))

  (use-package evil)
  (evil-mode 1)

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package general)
  (use-package hydra)
#+END_SRC

* Project Management
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :demand t
    :custom ((projectile-completion-system 'ivy))
    :bind ("C-M-p" . projectile-find-file)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/.local/src")
      (setq projectile-project-search-path '("~/.local/src")))
    (setq projectile-switch-project-action #'projectile-dired))
#+END_SRC

** Counsel Projectile
The counsel-projectile-rg command
Default key binding: C-c p s r.

This command is a replacement for projectile-ripgrep. It is similar to counsel-projectile-grep (see above) but uses rg (ripgrep) instead of grep.

/Search in files and folders using C-c p s r./
*C-c C-o to pups up the result list into a separate buffer.*
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))
#+END_SRC

** Magit
NOTE: Make sure to configure a GitHub token before using this package!
[[https://magit.vc/manual/forge/Token-Creation.html#Token-Creation][Token Creation]]
[[https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started][Getting Started]]
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package forge
    :ensure t)
#+END_SRC

*** magit-todos
This is an interesting extension to Magit that shows a TODOs section in your git status buffer containing all lines with TODO (or other similar words) in files contained within the repo. More information at the GitHub repo.

#+BEGIN_SRC emacs-lisp
  (use-package magit-todos
    :defer t)
#+END_SRC

* Development
Configuration for various programming languages and dev tools that I use.
** Git
*** git-link
#+BEGIN_SRC emacs-lisp
  (use-package git-link
    :commands git-link
    :config
    (setq git-link-open-in-browser t))

  ;;Functions can be called interactively (M-x git-link) or via a key binding of your choice. For example:
  (global-set-key (kbd "C-c g l") 'git-link)
#+END_SRC
** Languages
*** Language Server Support
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :commands lsp
    :hook ((typescript-mode js2-mode web-mode) . lsp)
    :bind (:map lsp-mode-map
                ("TAB" . completion-at-point))
    :custom (lsp-headerline-breadcrumb-enable nil))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-sideline-enable t)
    (setq lsp-ui-sideline-show-hover nil)
    (setq lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-show))
#+END_SRC

*** Debug Adapter Support
#+BEGIN_SRC emacs-lisp
  (use-package dap-mode
    :custom
    (lsp-enable-dap-auto-configure nil)
    :config
    (dap-ui-mode 1)
    (dap-tooltip-mode 1)
    (require 'dap-node)
    (dap-node-setup))
#+END_SRC

*** Meta Lisp
Here are packages that are useful across different Lisp and Scheme implementations:
#+BEGIN_SRC emacs-lisp
  (use-package lispy
    :hook ((emacs-lisp-mode . lispy-mode)
           (scheme-mode . lispy-mode)))

  (use-package lispyville
    :hook ((lispy-mode . lispyville-mode))
    :config
    (lispyville-set-key-theme '(operators c-w additional
                                          additional-movement slurp/barf-cp
                                          prettify)))
#+END_SRC

*** Scheme
Include .sld library definition files
#+BEGIN_SRC emacs-lisp
  (use-package scheme-mode
    :mode "\\.sld\\'")
#+END_SRC

*** C/C++
#+BEGIN_SRC emacs-lisp
  (use-package ccls
    :hook ((c-mode c++-mode objc-mode cuda-mode) .
           (lambda () (require 'ccls) (lsp))))
#+END_SRC

*** Go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :hook (go-mode . lsp-deferred))
#+END_SRC

*** Rust
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :mode "\\.rs\\'"
    :init (setq rust-format-on-save t))

  (use-package cargo
    :defer t)
#+END_SRC

*** Emacs Lisp
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook #'flycheck-mode)

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))
#+END_SRC

*** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode "\\.md\\'"
    :config
    (setq markdown-command "marked")
    (defun amf/set-markdown-header-font-sizes ()
      (dolist (face '((markdown-header-face-1 . 1.8)
                      (markdown-header-face-2 . 1.6)
                      (markdown-header-face-3 . 1.4)
                      (markdown-header-face-4 . 1.2)
                      (markdown-header-face-5 . 1.0)))
        (set-face-attribute (car face) nil :weight 'normal :height (cdr face)))))
#+END_SRC

*** HTML
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'"
    :config
    (setq-default web-mode-code-indent-offset 2)
    (setq-default web-mode-markup-indent-offset 2)
    (setq-default web-mode-attribute-indent-offset 2))

  ;; 1. Start the server with `httpd-start'
  ;; 2. Use `impatient-mode' on any buffer
  (use-package impatient-mode)

  (use-package skewer-mode)
#+END_SRC

*** YAML
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :mode "\\.ya?ml\\'")
#+END_SRC

** Compilation
Set up the compile package and ensure that compilation output automatically scrolls.
#+BEGIN_SRC emacs-lisp
  (use-package compile
    :custom
    (compilation-scroll-output t))

  (defun auto-recompile-buffer ()
    (interactive)
    (if (member #'recompile after-save-hook)
        (remove-hook 'after-save-hook #'recompile t)
      (add-hook 'after-save-hook #'recompile nil t)))
#+END_SRC

** Productivity
*** Syntax checking with Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :defer t
    :hook (lsp-mode . flycheck-mode))
#+END_SRC
*** Snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :hook (prog-mode . yas-minor-mode)
    :config
    (yas-reload-all))
#+END_SRC
*** Smart Parens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :hook (prog-mode . smartparens-mode))
#+END_SRC
*** Rainbow Mode
Sets the background of HTML color strings in buffers to be the color mentioned.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :defer t
    :hook (org-mode
           emacs-lisp-mode
           web-mode
           typescript-mode
           js2-mode))
#+END_SRC
* Writing
** Darkroom for distraction-free writing
#+BEGIN_SRC emacs-lisp
  (use-package darkroom
    :commands darkroom-mode
    :config
    (setq darkroom-text-scale-increase 0))

  (defun amf/enter-focus-mode ()
    (interactive)
    (darkroom-mode 1)
    (display-line-numbers-mode 0))

  (defun amf/leave-focus-mode ()
    (interactive)
    (darkroom-mode 0)
    (display-line-numbers-mode 1))

  (defun amf/toggle-focus-mode ()
    (interactive)
    (if (symbol-value darkroom-mode)
        (amf/leave-focus-mode)
      (amf/enter-focus-mode)))
#+END_SRC

** Spell-checking
#+BEGIN_SRC emacs-lisp
  (use-package flyspell-correct
    :ensure t
    :config
    ;; set ivy as correcting interface
    (define-key flyspell-mode-map (kbd "C-;") 'flyspell-correct-wrapper))

  (use-package flyspell-correct-ivy
    :ensure t)

  (require 'flymake)
  (setq ispell-program-name "aspell") ; could be ispell as well, depending on your preferences
  (setq ispell-dictionary "british") ; this can obviously be set to any language your spell-checking program supports

  (add-hook 'text-mode-hook 'flyspell-mode)
#+END_SRC

* Applications
** Calendar
calfw is a gorgeous calendar UI that is able to show all of my scheduled Org Agenda items.
#+BEGIN_SRC emacs-lisp
  (use-package calfw
    :commands cfw:open-org-calendar
    :config
    (setq cfw:fchar-junction ?╋
          cfw:fchar-vertical-line ?┃
          cfw:fchar-horizontal-line ?━
          cfw:fchar-left-junction ?┣
          cfw:fchar-right-junction ?┫
          cfw:fchar-top-junction ?┯
          cfw:fchar-top-left-corner ?┏
          cfw:fchar-top-right-corner ?┓)

    (use-package calfw-org
      :config
      (setq cfw:org-agenda-schedule-args '(:timestamp))))
#+END_SRC

** vterm
vterm enables the use of fully-fledged terminal applications within Emacs so that I don’t need an external terminal emulator.
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :after evil-collection
    :commands vterm
    :config
    (setq vterm-max-scrollback 1000000)
    (advice-add 'evil-collection-vterm-insert :before #'vterm-reset-cursor-point))
#+END_SRC

** Media
*** mpv
#+BEGIN_SRC emacs-lisp
  (use-package mpv)
#+END_SRC

*** EMMS
#+BEGIN_SRC emacs-lisp
  (use-package emms
    :commands emms
    :config
    (require 'emms-setup)
    (emms-standard)
    (emms-default-players)
    (emms-mode-line-disable)
    (setq emms-source-file-default-directory "/mnt/entertainment/music"))
#+END_SRC

** Mail
Mail in Emacs with mu4e
mu4e is the best mail interface I’ve ever used because it’s fast and makes it really easy to power through a huge e-mail backlog. Love the ability to capture links to emails with org-mode too.

Useful mu4e manual pages:
- [[https://www.djcbsoftware.nl/code/mu/mu4e/MSGV-Keybindings.html#MSGV-Keybindings][Key bindings]]
- [[https://www.djcbsoftware.nl/code/mu/mu4e/Org_002dmode-links.html#Org_002dmode-links][org-mode integration]]

#+BEGIN_SRC emacs-lisp
  (use-package mu4e
    :ensure nil
    ;; :defer 20 ;; Wait until 20 seconds after startup
    :config

    ;; Refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 5 60))
    (setq mu4e-get-mail-command "mbsync -a -c ~/.config/isync/mbsyncrc")
    (setq mu4e-maildir "~/.local/share/Mail")

    ;; Use Ivy for mu4e completions (maildir folders, etc)
    (setq mu4e-completing-read-function #'ivy-completing-read)

    ;; load mu4e-context configuration
    (setq mu4e-contexts
          (list
           ;; Work
           (make-mu4e-context
            :name "Work"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/Work" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "abdeltwab.m.fakhry@gmail.com")
                    (user-full-name    . "Abd El-Twab M. Fakhry")

                    (smtpmail-smtp-server  . "smtp.gmail.com")
                    (smtpmail-smtp-service . 465)
                    (smtpmail-stream-type  . ssl)

                    (mu4e-sent-folder       . "/Work/[Gmail]/Sent Mail")
                    (mu4e-spam-folder       . "/Work/[Gmail]/Spam")
                    (mu4e-trash-folder      . "/Work/[Gmail]/Trash")
                    (mu4e-starred-folder    . "/Work/[Gmail]/Starred")
                    (mu4e-scheduled-folder  . "/Work/[Gmail]/Scheduled")
                    (mu4e-drafts-folder     . "/Work/[Gmail]/Drafts")))

           ;; University account
           (make-mu4e-context
            :name "Uni"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/Uni" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "AbdEl-TwabFakhry.2020@azhar.edu.eg")
                    (user-full-name    . "Abd El-Twab M. Fakhry")

                    (smtpmail-smtp-server  . "smtp.office365.com")
                    (smtpmail-smtp-service . 587)
                    (smtpmail-stream-type  . ssl)

                    (mu4e-inbox-folder     . "/Uni/Inbox")
                    (mu4e-sent-folder      . "/Uni/Sent Items")
                    (mu4e-spam-folder      . "/Uni/Spambox")
                    (mu4e-trash-folder     . "/Uni/Trash")
                    (mu4e-drafts-folder    . "/Uni/Drafts")))))

    ;; Mail dir
    (setq mu4e-maildir-shortcuts
          '(("/Work/Inbox" 				     . ?i)
            ("/Work/[Gmail]/Sent Mail" . ?s)
            ("/Work/[Gmail]/Spam"      . ?p)
            ("/Work/[Gmail]/Trash"     . ?t)
            ("/Work/[Gmail]/Starred"   . ?r)
            ("/Work/[Gmail]/Scheduled" . ?c)

            ("/Uni/Inbox"        . ?u)
            ("/Uni/Sent Items"   . ?n)
            ("/Uni/Spambox"      . ?m)
            ("/Uni/Trash"        . ?h)))

    ;; You can create bookmarks to show merged views of folders across accounts:
    (add-to-list 'mu4e-bookmarks '("m:/Uni/Inbox or m:/Work/Inbox" "All Inboxes" ?i))

    ;; Display options
    (setq mu4e-view-show-images t)
    (setq mu4e-view-show-addresses 't)

    (setq message-confirm-send t)

    ;; Picking a context for sending mail
    ;; When using multiple contexts, you might want to define which context gets picked automatically for sending email (similar to mu4e-context-policy):
    ;; Only ask if a context hasn't been previously picked
    (setq mu4e-compose-context-policy 'ask-if-none)

    ;; start with the first (default) context;
    ;; default is to ask-if-none (ask when there's no context yet, and none match)
    (setq mu4e-context-policy 'pick-first)

    ;; This is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-change-filenames-when-moving t)

    ;; Configure the function to use for sending mail
    (setq message-send-mail-function 'smtpmail-send-it)

    ;; Improving the look of plain text emails
    ;; By default all e-mails are sent as plain text. This can lead to strange wrapping in other email clients when reading your messages. You can improve this by setting the following variable:
    ;; Make sure plain text mails flow correctly for recipients
    (setq mu4e-compose-format-flowed t)

    ;; Adding a signature to your emails
    ;; You can set the mu4e-compose-signature variable to a string for the signature to include in your e-mails!
    (setq mu4e-compose-signature "https://abdeltwabmf.github.io")

    ;; Automatically Sign Every Email
    ;; You can automatically sign every e-mail using the message-send-hook:
    (add-hook 'message-send-hook 'mml-secure-message-sign-pgpmime)

    ;; Run mu4e in the background to sync mail periodically
    (mu4e t))
#+END_SRC

Use [[https://github.com/iqbalansari/mu4e-alert][mu4e-alert]] to show notifications when e-mail comes in:
#+BEGIN_SRC emacs-lisp
  (use-package mu4e-alert
    :after mu4e
    :config
    ;; Show notifications for mails already notified
    (setq mu4e-alert-notify-repeated-mails nil)

    (mu4e-alert-enable-notifications))
#+END_SRC

* Org Mode
#+BEGIN_SRC emacs-lisp
  (defun amf/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1))

  (defun amf/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))))

  (with-eval-after-load 'org-faces
    ;; Increase the size of various headings
    (set-face-attribute 'org-document-title nil :font "Cantarell" :weight 'bold :height 1.5)
    (dolist (face '((org-level-1 . 1.5)
                    (org-level-2 . 1.4)
                    (org-level-3 . 1.3)
                    (org-level-4 . 1.2)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.0)
                    (org-level-7 . 1.0)
                    (org-level-8 . 1.0)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face))))

  (use-package org
    :hook (org-mode . amf/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (amf/org-font-setup))

  (use-package org-bullets
    :after org
    :ensure t
    :config
    (add-hook 'org-mode-hook #'org-bullets-mode)
    (setq inhibit-compacting-font-caches t))

  (defun amf/org-mode-visual-fill ()
    (setq visual-fill-column-width 0
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . amf/org-mode-visual-fill))
#+END_SRC

toc-org is an Emacs utility to have an up-to-date table of contents in the org files
#+BEGIN_SRC emacs-lisp
  (use-package toc-org)
  (toc-org-insert-toc t)
#+END_SRC

This mode causes significant slowdown!
I have looked into the matter in the past, and from what I understand the usual cause
of this is relates to a deeper rooted issue involving fonts and font-lock reliant packages
#+BEGIN_SRC emacs-lisp
  (setq inhibit-compacting-font-caches t)

  (provide 'init)
  ;;; init.el ends here
#+END_SRC

