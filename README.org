#+title: Emacs Rice
#+date: <2022-03-06 Sun>
#+property: header-args:emacs-lisp :tangle init.el
#+options: toc
#+author: Abd El-Twab M. Fakhry
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.2 (Org mode 9.4.4)

* Table of contents
- Startup performance
- Package manager
- User interface
  - Font
- Ivy
- Evil mode and key binding
- Project management
- Org mode

* Startup performance
   
Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.
The default is 800 kilobytes.  Measured in bytes.
#+BEGIN_SRC emacs-lisp
  ;;; package --- Summary

  ;;; Commentary:
  ;; My Emacs configuration in org mode

  ;;; Code:
  (setq gc-cons-threshold (* 50 1000 1000))
#+END_SRC

Profile emacs startup
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time))) gcs-done)))
#+END_SRC

* Package manager

Initialize package sources
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC

* User interface
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq visible-bell t)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
  (menu-bar-mode -1)

  (column-number-mode)
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative)
#+END_SRC

Disable line numbers for some modes
#+BEGIN_SRC emacs-lisp
  (dolist (mode '(term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  vterm-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

Rainbow Delimiters Mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'foo-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

EMOJIS
Emojify is an Emacs extension to display emojis. It can display github style emojis like :smile: or plain ascii ones like :).
#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :ensure t
    :hook
    (after-init . global-emojify-mode))
#+END_SRC

NOTE: The first time you load your configuration on a new machine, you'll
need to run the following command interactively so that mode line icons
display correctly:
/M-x all-the-icons-install-fonts/
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+END_SRC

Theme and Modeline
#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
    :ensure t
    :config
    (load-theme 'gruvbox-light-soft t))
#+END_SRC

Enable Mode Diminishing
The diminish package hides pesky minor modes from the modelines.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
#+END_SRC


** Font

#+BEGIN_SRC emacs-lisp
  (set-fontset-font "fontset-default" 'arabic (font-spec
                                               :family "Kawkab Mono"
                                               :size 12))
#+END_SRC

* Ivy

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :ensure t
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+END_SRC

* Evil mode and key binding

#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (rune/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (rune/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))
#+END_SRC

* Project management

NOTE: Make sure to configure a GitHub token before using this package!
[[https://magit.vc/manual/forge/Token-Creation.html#Token-Creation][Token Creation]]
[[https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started][Getting Started]]
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package forge
    :ensure t)
#+END_SRC

* Org mode

#+BEGIN_SRC emacs-lisp
  (defun amf/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1))

  (defun amf/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))))

  (with-eval-after-load 'org-faces
    ;; Increase the size of various headings
    (set-face-attribute 'org-document-title nil :font "Cantarell" :weight 'bold :height 2.0)
    (dolist (face '((org-level-1 . 2.0)
                    (org-level-2 . 1.8)
                    (org-level-3 . 1.6)
                    (org-level-4 . 1.4)
                    (org-level-5 . 1.2)
                    (org-level-6 . 1.0)
                    (org-level-7 . 1.0)
                    (org-level-8 . 1.0)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face))))

  (use-package org
    :hook (org-mode . amf/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (amf/org-font-setup))

  (use-package org-bullets
    :after org
    :ensure t
    :config
    (add-hook 'org-mode-hook #'org-bullets-mode)
    (setq inhibit-compacting-font-caches t))

  (defun amf/org-mode-visual-fill ()
    (setq visual-fill-column-width 0
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . amf/org-mode-visual-fill))
#+END_SRC

This mode causes significant slowdown!
I have looked into the matter in the past, and from what I understand the usual cause
of this is relates to a deeper rooted issue involving fonts and font-lock reliant packages
#+BEGIN_SRC emacs-lisp
  (setq inhibit-compacting-font-caches t)

  (provide 'init)
  ;;; init.el ends here
#+END_SRC

